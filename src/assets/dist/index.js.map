{"version":3,"sources":["../../../node_modules/graphql-quest/dist/quest.es.js","utils.js","queries.js","CommentController.js","index.js"],"names":["e","endpoint","fetchOptions","t","query","n","variables","r","a","JSON","stringify","method","o","headers","s","i","toLowerCase","c","URL","searchParams","append","toString","fetch","toUpperCase","body","data","errors","json","send","dateFromUnix","unix","Date","Number","toIsoString","toISOString","toPrettyDate","date","hoursOffset","getTimezoneOffset","dateString","setHours","getHours","toLocaleString","split","trim","formatFormValues","htmlElementCollection","reduce","acc","item","name","value","getCurrentTime","getTime","CREATE_COMMENT_QUERY","CommentController","shell","minimumSubmissionTime","loadingSvg","querySelector","commentList","message","client","QuestClient","hideLoadingSvg","style","display","showError","firstElementChild","innerText","appendComment","commentData","createdAt","id","clonedItem","cloneNode","forEach","property","querySelectorAll","href","insertBefore","firstChild","addEventListener","preventDefault","startTime","target","elements","content","emailAddress","console","log","dataset","jamCommentsUrl","domain","path","window","location","pathname","then","result","remaining","delay","setTimeout","createComment","document"],"mappings":"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","file":"index.js","sourceRoot":"../js","sourcesContent":["async function e({endpoint:e,fetchOptions:t,query:n,variables:r}){const a={query:n,variables:JSON.stringify(r)},{method:o=\"POST\",headers:s={}}=t,i=\"get\"===o.toLowerCase(),c=i?function(e,t){const n=new URL(e);for(const e in t)n.searchParams.append(e,t[e]);return n.toString()}(e,a):e;try{const e=await fetch(c,{method:o.toUpperCase(),headers:{\"Content-Type\":\"application/\"+(i?\"x-www-form-urlencoded\":\"json\"),...s},body:i?null:JSON.stringify(a)}),{data:t,errors:n}=await e.json(),r={data:t};return n&&(r.errors=n),r}catch(e){return{errors:[e]}}}async function t(t,n,r={},a={}){return await e({endpoint:t,query:n,variables:r,fetchOptions:a})}function n({endpoint:t,method:n,headers:r}){return{send:async(a,o={})=>await e({endpoint:t,query:a,variables:o,fetchOptions:{method:n,headers:r}})}}export{n as QuestClient,t as quest};\n","/**\n * Given a timestamp, convert it to a Date object.\n *\n * @param {number} unix\n * @return {Date}\n */\nexport const dateFromUnix = (unix) => {\n  return new Date(Number(unix));\n};\n\n/**\n * Convert unix timestamp to ISO string.\n *\n * @param {number} unix\n * @return {string}\n */\nexport const toIsoString = (unix) => {\n  return dateFromUnix(unix).toISOString();\n};\n\n/**\n * Convert a Unix timestamp to a nice, pretty format.\n *\n * @param {integer} unix\n * @return {string}\n */\nexport const toPrettyDate = (unix) => {\n  let date = dateFromUnix(unix);\n  let hoursOffset = date.getTimezoneOffset() / 60;\n  date.setHours(date.getHours() - hoursOffset);\n  let dateString = date.toLocaleString(\"en-US\").split(\",\");\n  return dateString[0].trim();\n};\n\n/**\n * Given a list of elements, convert the values into an object.\n *\n * @param {NodeList} htmlElementCollection\n * @return {object}\n */\nexport const formatFormValues = (htmlElementCollection) => {\n  return [...htmlElementCollection].reduce((acc, item) => {\n    if (!item.name) return acc;\n\n    acc[item.name] = item.value;\n    return acc;\n  }, {});\n};\n\nexport const getCurrentTime = () => new Date().getTime();\n","export const CREATE_COMMENT_QUERY = `\n  mutation CreateComment(\n    $name: String!,\n    $path: String!,\n    $content: String!,\n    $domain: String!,\n    $emailAddress: String\n  ){\n    createComment(\n      name: $name,\n      path: $path,\n      content: $content,\n      emailAddress: $emailAddress\n      domain: $domain\n    ) {\n      createdAt\n      name\n      emailAddress\n      content\n      id\n      site {\n        domain\n      }\n    }\n  }\n`;\n","import { QuestClient } from \"graphql-quest\";\nimport { formatFormValues, getCurrentTime, toPrettyDate } from \"./utils\";\nimport { CREATE_COMMENT_QUERY } from \"./queries\";\n\nexport default function CommentController(shell) {\n  const minimumSubmissionTime = 1000;\n  const loadingSvg = shell.querySelector(\".jc-CommentBox-loadingDots\");\n  const commentList = shell.querySelector(\n    '[data-jam-comments-component=\"list\"]'\n  );\n  const message = shell.querySelector(\n    '[data-jam-comments-component=\"message\"]'\n  );\n  const client = new QuestClient({\n    endpoint: \"http://localhost:4000/graphql\",\n    headers: {\n      \"x-api-key\": \"JAM_COMMENTS_API_KEY\",\n    },\n  });\n\n  /**\n   * When textarea is focused upon, show all inputs.\n   *\n   * @return {void}\n   */\n  const listenForTextareaFocus = () => {\n    shell.querySelector('[name=\"content\"]').addEventListener(\"focus\", (e) => {\n      [...shell.querySelectorAll(\".jc-CommentBox-contactInput\")].forEach(\n        (i) => {\n          i.style.display = \"flex\";\n        }\n      );\n    });\n  };\n\n  /**\n   * When form is submitted, send to service & respond accordingly.\n   *\n   * @return {void}\n   */\n  const listenForSubmission = () => {\n    shell.querySelector(\"form\").addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n\n      const startTime = getCurrentTime();\n      const { content, name, emailAddress } = formatFormValues(\n        e.target.elements\n      );\n\n      console.log(shell.dataset.jamCommentsUrl);\n\n      const variables = {\n        name,\n        domain: \"JAM_COMMENTS_DOMAIN\",\n        content,\n        emailAddress,\n        path: shell.dataset.jamCommentsUrl || window.location.pathname,\n      };\n\n      // Show the loading dots.\n      loadingSvg.style.display = \"\";\n\n      client.send(CREATE_COMMENT_QUERY, variables).then((result) => {\n        const remaining =\n          minimumSubmissionTime - (getCurrentTime() - startTime);\n        const delay = remaining > 0 ? remaining : 0;\n\n        if (result.errors || !result.data) {\n          hideLoadingSvg();\n          return showError();\n        }\n\n        setTimeout(() => {\n          hideLoadingSvg();\n          appendComment(result.data.createComment);\n        }, delay);\n      });\n    });\n  };\n\n  /**\n   * Hide the loading SVG.\n   *\n   * @return {void}\n   */\n  const hideLoadingSvg = () => {\n    loadingSvg.style.display = \"none\";\n  };\n\n  /**\n   * Display a generic error message.\n   *\n   * @return {void}\n   */\n  const showError = () => {\n    message.style.display = \"\";\n    message.firstElementChild.innerText =\n      \"Oh no! Something went wrong while trying to submit that comment.\";\n  };\n\n  /**\n   * Clone list item and attach to list of comments with latest comment data.\n   *\n   * @return {void}\n   */\n  const appendComment = (commentData) => {\n    const contentKeysToReplace = [\"content\", \"createdAt\", \"name\"];\n\n    commentData.createdAt = toPrettyDate(commentData.createdAt);\n\n    const { id } = commentData;\n    const clonedItem = commentList.querySelector(\"li\").cloneNode(true);\n\n    // Set the text content for each element piece.\n    contentKeysToReplace.forEach((property) => {\n      const node = clonedItem.querySelector(\n        `[data-jam-comments-component=\"${property}\"]`\n      );\n      node.innerText = commentData[property];\n    });\n\n    clonedItem.querySelectorAll(\n      '[data-jam-comments-component=\"anchor\"]'\n    ).href = `#comment-${id}`;\n\n    commentList.insertBefore(clonedItem, commentList.firstChild);\n  };\n\n  listenForSubmission();\n  listenForTextareaFocus();\n}\n","import \"../scss/style.scss\";\nimport CommentController from \"./CommentController\";\n\n// Initialize each comment form found on the page.\n[\n  ...document.querySelectorAll('[data-jam-comments-component=\"shell\"]'),\n].forEach((shell) => CommentController(shell));\n"]}